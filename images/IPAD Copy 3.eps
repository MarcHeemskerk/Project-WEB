%!PS-Adobe-3.0 EPSF-3.0
%APL_DSC_Encoding: UTF8
%APLProducer: (Version 10.14.1 (Build 18B75) Quartz PS Context)
%%Title: (Unknown)
%%Creator: (Unknown)
%%CreationDate: (Unknown)
%%For: (Unknown)
%%DocumentData: Clean7Bit
%%LanguageLevel: 2
%%Pages: 1
%%BoundingBox: 0 0 2048 1500
%%EndComments
%%BeginProlog
%%BeginFile: cg-pdf.ps
%%Copyright: Copyright 2000-2004 Apple Computer Incorporated.
%%Copyright: All Rights Reserved.
currentpacking true setpacking
/cg_md 141 dict def
cg_md begin
/L3? languagelevel 3 ge def
/bd{bind def}bind def
/ld{load def}bd
/xs{exch store}bd
/xd{exch def}bd
/cmmtx matrix def
mark
/sc/setcolor
/scs/setcolorspace
/dr/defineresource
/fr/findresource
/T/true
/F/false
/d/setdash
/w/setlinewidth
/J/setlinecap
/j/setlinejoin
/M/setmiterlimit
/i/setflat
/rc/rectclip
/rf/rectfill
/rs/rectstroke
/f/fill
/f*/eofill
/sf/selectfont
/s/show
%/as/ashow
/xS/xshow
/yS/yshow
/xyS/xyshow
/S/stroke
/m/moveto
/l/lineto
/c/curveto
/h/closepath
/n/newpath
/q/gsave
/Q/grestore
counttomark 2 idiv
%dup (number of ld's = )print == flush	% *** how many 
{ld}repeat pop
/SC{	% CSname
    /ColorSpace fr scs
}bd
/sopr /setoverprint where{pop/setoverprint}{/pop}ifelse ld
/soprm /setoverprintmode where{pop/setoverprintmode}{/pop}ifelse ld
/cgmtx matrix def
/sdmtx{cgmtx currentmatrix pop}bd
/CM {cgmtx setmatrix}bd		% pop the ctm: our gstate ctm on host is now identity
/cm {cmmtx astore CM concat}bd	% reset the matrix and then concat
/W{clip newpath}bd
/W*{eoclip newpath}bd

statusdict begin product end dup (HP) anchorsearch{
    pop pop pop	% pop off the search results
    true
}{
    pop	% previous search result
   (hp) anchorsearch{
	pop pop true
    }{
	pop false
    }ifelse
}ifelse

{	% HP is the product: we use this method of stroking because of a bug in their clone printers with certain T3 fonts
    { 
	{ % charCode Wx Wy
	    pop pop % charCode
	    (0)dup 0 4 -1 roll put
	    F charpath
	}cshow
    }
}{
    {F charpath}
}ifelse
/cply exch bd
/cps {cply stroke}bd
/pgsave 0 def
/bp{/pgsave save store}bd
/ep{pgsave restore showpage}def		% dont' bind
/re{4 2 roll m 1 index 0 rlineto 0 exch rlineto neg 0 rlineto h}bd

/scrdict 10 dict def
/scrmtx matrix def
/patarray 0 def
/createpat{patarray 3 1 roll put}bd
/makepat{
scrmtx astore pop
gsave
initgraphics
CM 
patarray exch get
scrmtx
makepattern
grestore
setpattern
}bd

/cg_BeginEPSF{
    userdict save/cg_b4_Inc_state exch put
    userdict/cg_endepsf/cg_EndEPSF load put
    count userdict/cg_op_count 3 -1 roll put 
    countdictstack dup array dictstack userdict/cg_dict_array 3 -1 roll put
    3 sub{end}repeat
    /showpage {} def
    0 setgray 0 setlinecap 1 setlinewidth 0 setlinejoin
    10 setmiterlimit [] 0 setdash newpath
    false setstrokeadjust false setoverprint	% don't use F
}bd
/cg_EndEPSF{
  countdictstack 3 sub { end } repeat
  cg_dict_array 3 1 index length 3 sub getinterval
  {begin}forall
  count userdict/cg_op_count get sub{pop}repeat
  userdict/cg_b4_Inc_state get restore
  F setpacking
}bd

/cg_biproc{currentfile/RunLengthDecode filter}bd
/cg_aiproc{currentfile/ASCII85Decode filter/RunLengthDecode filter}bd
/ImageDataSource 0 def
L3?{
    /cg_mibiproc{pop pop/ImageDataSource{cg_biproc}def}bd
    /cg_miaiproc{pop pop/ImageDataSource{cg_aiproc}def}bd
}{
    /ImageBandMask 0 def
    /ImageBandData 0 def
    /cg_mibiproc{
	string/ImageBandMask xs
	string/ImageBandData xs
	/ImageDataSource{[currentfile/RunLengthDecode filter dup ImageBandMask/readstring cvx
	    /pop cvx dup ImageBandData/readstring cvx/pop cvx]cvx bind}bd
    }bd
    /cg_miaiproc{	
	string/ImageBandMask xs
	string/ImageBandData xs
	/ImageDataSource{[currentfile/ASCII85Decode filter/RunLengthDecode filter
	    dup ImageBandMask/readstring cvx
	    /pop cvx dup ImageBandData/readstring cvx/pop cvx]cvx bind}bd
    }bd
}ifelse
/imsave 0 def
/BI{save/imsave xd mark}bd
/EI{imsave restore}bd
/ID{
counttomark 2 idiv
dup 2 add	% leave room for imagetype and imagematrix
dict begin
{def} repeat
pop		% remove mark
/ImageType 1 def
/ImageMatrix[Width 0 0 Height neg 0 Height]def
currentdict dup/ImageMask known{ImageMask}{F}ifelse exch
% currentdict on stack
L3?{
    dup/MaskedImage known
    { 
	pop
	<<
	    /ImageType 3
	    /InterleaveType 2
	    /DataDict currentdict
	    /MaskDict
	    <<  /ImageType 1
		/Width Width
		/Height Height
		/ImageMatrix ImageMatrix
		/BitsPerComponent 1
		/Decode [0 1]
		currentdict/Interpolate known
		{/Interpolate Interpolate}if
	    >>
	>>
    }if
}if
exch
{imagemask}{image}ifelse	
end	% pop imagedict from dict stack
}bd

/cguidfix{statusdict begin mark version end
{cvr}stopped{cleartomark 0}{exch pop}ifelse
2012 lt{dup findfont dup length dict begin
{1 index/FID ne 2 index/UniqueID ne and
{def} {pop pop} ifelse}forall
currentdict end definefont pop
}{pop}ifelse
}bd
/t_array 0 def
/t_i 0 def
/t_c 1 string def
/x_proc{ % x y
    exch t_array t_i get add exch moveto
    /t_i t_i 1 add store
}bd
/y_proc{ % x y
    t_array t_i get add moveto
    /t_i t_i 1 add store
}bd
/xy_proc{
        % x y
	t_array t_i 2 copy 1 add get 3 1 roll get 
	4 -1 roll add 3 1 roll add moveto
	/t_i t_i 2 add store
}bd
/sop 0 def		% don't bind sop
/cp_proc/x_proc ld 	% default moveto proc is for xwidths only
/base_charpath		% string array
{
    /t_array xs
    /t_i 0 def
    { % char
	t_c 0 3 -1 roll put
        currentpoint
	t_c cply sop
        cp_proc
    }forall
    /t_array 0 def
}bd
/sop/stroke ld		% default sop is stroke. Done here so we don't bind in /base_charpath 

% default sop is stroke
/nop{}def
/xsp/base_charpath ld
/ysp{/cp_proc/y_proc ld base_charpath/cp_proc/x_proc ld}bd
/xysp{/cp_proc/xy_proc ld base_charpath/cp_proc/x_proc ld}bd
/xmp{/sop/nop ld /cp_proc/x_proc ld base_charpath/sop/stroke ld}bd
/ymp{/sop/nop ld /cp_proc/y_proc ld base_charpath/sop/stroke ld}bd
/xymp{/sop/nop ld /cp_proc/xy_proc ld base_charpath/sop/stroke ld}bd
/refnt{ % newname encoding fontname
findfont dup length dict copy dup
/Encoding 4 -1 roll put 
definefont pop
}bd
/renmfont{ % newname fontname
findfont dup length dict copy definefont pop
}bd

L3? dup dup{save exch}if

% languagelevel2 ONLY code goes here

/Range 0 def
/DataSource 0 def
/val 0 def
/nRange 0 def
/mulRange 0 def
/d0 0 def
/r0 0 def
/di 0 def
/ri 0 def
/a0 0 def
/a1 0 def
/r1 0 def
/r2 0 def
/dx 0 def
/Nsteps 0 def
/sh3tp 0 def
/ymax 0 def
/ymin 0 def
/xmax 0 def
/xmin 0 def

/setupFunEval % funDict -- 	% this calculates and sets up a function dict for evaulation.
{
    begin
	/nRange Range length 2 idiv store
	/mulRange   % precompute the range data needed to map a sample value from the table to a range value
		    % this data looks like [ range0mul range0min range1mul range1min ... rangeN-1mul rangeN-1min ]
	[ 
	    0 1 nRange 1 sub
	    { % index
		    2 mul/nDim2 xd		% 2*dimension# we are dealing with
		    Range nDim2 get		% ymin
		    Range nDim2 1 add get	% ymin ymax 
		    1 index sub			% ymin (ymax-ymin)
						% xmin = 0, xmax = 255 (2^bitspersample - 1)
		    255 div			% ymin (ymax-ymin)/(xmax - xmin)
		    exch			% (ymax-ymin)/(xmax - xmin) ymin
	    }for
	]store
    end
}bd

/FunEval % val1 fundict -> comp1 comp2 ... compN
{
    begin
	% the value passed in is the base index into the table
	nRange mul /val xd	% compute the actual index to the table
				% since there are nRange entries per base index
	0 1 nRange 1 sub
	{
	    dup 2 mul/nDim2 xd % dim
	    val	% base value to use to do our lookup
	    add DataSource exch get %  lookedupval
	    mulRange nDim2 get mul 	% lookedupval*(ymax-ymin)/(xmax-xmin)
	    mulRange nDim2 1 add get % lookedupval*(ymax-ymin)/(xmax-xmin) ymin
	    add % interpolated result
	}for	% comp1 comp2 ... compN
    end
}bd

/max % a b -> max(a, b)
{
	2 copy lt
	{exch pop}{pop}ifelse
}bd

/sh2
{	% emulation of shading type 2. Assumes shading dictionary is top dictionary on the dict stack
	/Coords load aload pop 	% x0 y0 x1 y1
	3 index 3 index translate	% origin is now at beginning point of shading
					% x0 y0 x1 y1
	3 -1 roll sub	% x0 x1 y1-y0
	3 1 roll exch 	% y1-y0 x1 x0
	sub				% y1-y0 x1-x0
	2 copy
	dup mul exch dup mul add sqrt	% length of segment between two points
	dup
	scale  
	atan	% atan (dy/dx)
	%dup (rotation angle = )print ==
	rotate		% now line between 0,0 and 1,0 is the line perpendicular to which the axial lines are drawn					
	
	/Function load setupFunEval	% may need to setup function dictionary by calling setupFunEval
	
	% this is now specific to axial shadings. Compute the maximum bounds to fill
	clippath {pathbbox}stopped {0 0 0 0}if newpath 	% x0 y0 x1 y1
	/ymax xs
	/xmax xs
	/ymin xs
	/xmin xs
	currentdict/Extend known
	{
		/Extend load 0 get
		{	
			0/Function load FunEval sc	% evaluate the function to get a color and set it
			xmin ymin xmin abs ymax ymin sub rectfill
		}if
	}if
	% paint the rects. The sampling frequency is that of our table
	/Nsteps/Function load/Size get 0 get 1 sub store
	/dx 1 Nsteps div store
	gsave
		/di ymax ymin sub store
		/Function load
		% loop Nsteps + 1 times, incrementing the index by 1 each time
		0 1 Nsteps
		{
			1 index FunEval sc
			0 ymin dx di rectfill
			dx 0 translate
		}for
		pop	% pop our function
	grestore	% origin is back to start point
	currentdict/Extend known
	{
		/Extend load 1 get
		{	
			Nsteps/Function load FunEval sc	% last element
			1 ymin xmax 1 sub abs ymax ymin sub rectfill
		}if
	}if
}bd

/shp	% this paints our shape for shading type 3
{	% x1 r1 x0 r0 -
	4 copy

	% fill interior arc
	dup 0 gt{
		0 exch a1 a0 arc
	}{
		pop 0 moveto
	}ifelse

	dup 0 gt{
		0 exch a0 a1 arcn
	}{
		pop 0 lineto
	}ifelse
	
	fill

	% fill exterior arc
	dup 0 gt{
		0 exch a0 a1 arc
	}{
		pop 0 moveto
	}ifelse

	dup 0 gt{
		0 exch a1 a0 arcn
	}{
		pop 0 lineto
	}ifelse
	
	fill
}bd

/calcmaxs
{	% calculate maximum distance vector from origin to corner points
	% of bbox
	xmin dup mul ymin dup mul add sqrt		% (xmin2 + ymin2)
	xmax dup mul ymin dup mul add sqrt		% (xmax2 + ymin2)
	xmin dup mul ymax dup mul add sqrt		% (xmin2 + ymax2)
	xmax dup mul ymax dup mul add sqrt		% (xmax2 + ymax2)
	max max max								% maximum value
}bd

/sh3
{	% emulation of shading type 3. Assumes shading dictionary is top dictionary on the dict stack
	/Coords load aload pop 	% x0 y0 r1 x1 y1 r2
	5 index 5 index translate	% origin is now at first circle origin
	3 -1 roll 6 -1 roll sub		% y0 r1 y1 r2 dx
	3 -1 roll 5 -1 roll sub		% r1 r2 dx dy
	2 copy dup mul exch dup mul add sqrt
	/dx xs						% r1 r2 dx dy
	2 copy 0 ne exch 0 ne or
	{
		% r1 r2 dx dy
		exch atan rotate	% we are now rotated so dy is zero and positive values of dx move us as expected
	}{
		pop pop
	}ifelse
	% r1 r2		
	/r2 xs
	/r1 xs
	/Function load 
	dup/Size get 0 get 1 sub	% this is the size of our table minus 1
	/Nsteps xs		% at some point we should optimize this better so NSteps is based on needed steps for the device
	setupFunEval		% may need to setup function dictionary by calling setupFunEval
	% determine the case:
	% case 0: circle1 inside circle2
	% case 1: circle 2 inside circle 1
	% case 2: r1 = r2 
	% case 3: r1 != r2
	dx r2 add r1 lt{
		% circle 2 inside of circle 1
		0 
	}{
		dx r1 add r2 le
		{ % circle 1 inside of circle 2
			1
		}{ % circles don't contain each other
			r1 r2 eq
			{	% equal
				2
			}{ % r1 != r2
				3
			}ifelse		
		}ifelse
	}ifelse
	/sh3tp xs		% sh3tp has the number of our different cases
	clippath {pathbbox}stopped {0 0 0 0}if 
	newpath 	% x0 y0 x1 y1
	/ymax xs
	/xmax xs
	/ymin xs
	/xmin xs

	% Arc angle atan( sqrt((dx*dx + dy*dy) - dr*dr), dr)
	dx dup mul r2 r1 sub dup mul sub dup 0 gt
	{
		sqrt r2 r1 sub atan
		/a0 exch 180 exch sub store 
		/a1 a0 neg store 
	}{
		pop
		/a0 0 store
		/a1 360 store		
	}ifelse		

	currentdict/Extend known
	{
		/Extend load 0 get r1 0 gt and	% no need to extend if the radius of the first end is 0
		{	
			0/Function load FunEval sc	% evaluate the function to get a color and set it
			% case 0: circle1 inside circle2
			% case 1: circle 2 inside circle 1
			% case 2: circles don't contain each other and r1 == r2
			% case 3: circles don't contain each other and r1 != r2
			{ 
				{	% case 0
					dx 0 r1 360 0 arcn
					xmin ymin moveto
					xmax ymin lineto
					xmax ymax lineto
					xmin ymax lineto
					xmin ymin lineto
					eofill		% for the bigger radius we fill everything except our circle
				}
				{	% case 1
					r1 0 gt{0 0 r1 0 360 arc fill}if
				}
				{	% case 2
					% r1 == r2, extend 0
					% r3 = r, x3 = -(abs(minx) + r), x1 = 0
				
					% x(i+1) r(i+1) x(i) r(i) shp
					0 r1 xmin abs r1 add neg r1 shp
				}
				{	% case 3
					% no containment, r1 != r2
				
					r2 r1 gt{	% the endpoint we are drawing is that with a circle of zero radius
						% x(i+1) r(i+1) x(i) r(i) shp
						0 r1
						r1 neg r2 r1 sub div dx mul	% this is point of beginning circle
						0	% point of ending circle
						shp	% takes x(i+1) r(i+1) x(i) r(i)
					}{	% the first circle is the bigger of the two
						% we find a circle on our line which is outside the bbox in the
						% negative direction
						% x(i+1) r(i+1) x(i) r(i) shp
						0 r1 calcmaxs	% 0 r1 maxs
						dup
						% calculating xs: (-(maxs+r2)*x2)/(x2-(r1-r2))
						r2 add dx mul dx r1 r2 sub sub div
						neg				% maxs xs'
						exch 1 index	% xs' maxs xs'
						abs exch sub
						shp
					}ifelse
				} 
			}sh3tp get exec	% execute the extend at beginning proc for our shading type
		}if
	}if

	% now do the shading
	/d0 0 store
	/r0 r1 store
	/di dx Nsteps div store
	/ri r2 r1 sub Nsteps div store 
	/Function load 
	0 1 Nsteps
	{	% function t(i)
		1 index FunEval sc
		d0 di add r0 ri add d0 r0 shp
		{
		% fill interior arc
		d0 0 r0 a1 a0 arc
		d0 di add 0 r0 ri add a0 a1 arcn
		fill
		
		% fill exterior arc
		d0 0 r0 a0 a1 arc
		d0 di add 0 r0 ri add a1 a0 arcn
		fill
		}pop
		
		% advance to next
		/d0 d0 di add store
		/r0 r0 ri add store
	}for
	pop	% pop our function dict

	% handle Extend
	currentdict/Extend known
	{
		/Extend load 1 get r2 0 gt and	% no need to extend if the radius of the last end is 0
		{	
			Nsteps/Function load FunEval sc	% last element
			% case 0: circle1 inside circle2
			% case 1: circle 2 inside circle 1
			% case 2: circles don't contain each other and r1 == r2
			% case 3: circles don't contain each other and r1 != r2
			{ 
				{
					dx 0 r2 0 360 arc fill
				} 
				{
					dx 0 r2 360 0 arcn
					xmin ymin moveto
					xmax ymin lineto
					xmax ymax lineto
					xmin ymax lineto
					xmin ymin lineto
					eofill		% for the bigger radius we fill everything except our circle
				} 
				{	% r1 == r2, extend 1
					% r3 = r, x3 = (abs(xmax) + r), x1 = dx
					% x(i+1) r(i+1) x(i) r(i) shp
					xmax abs r1 add r1 dx r1 shp
				}	
				{	% no containment, r1 != r2
			
					r2 r1 gt{
						% we find a circle on our line which is outside the bbox in the
						% positive direction
						% x(i+1) r(i+1) x(i) r(i) shp
						calcmaxs dup	% maxs maxs
						% calculating xs: ((maxs+r1)*x2)/(x2-(r2-r1))
						r1 add dx mul dx r2 r1 sub sub div	% maxs xs
						exch 1 index	% xs maxs xs
						exch sub
						dx r2
						shp
					}{	% the endpoint we are drawing is that with a circle of zero radius
						% x(i+1) r(i+1) x(i) r(i) shp
						r1 neg r2 r1 sub div dx mul	% this is point of ending circle
						0		% radius of ending circle
						dx 		% point of starting circle
						r2		% radius of starting circle
						shp
					}ifelse
				}
			}			
			sh3tp get exec	% execute the extend at end proc for our shading type
		}if
	}if
}bd
/sh		% emulation of shfill operator for type 2 and type 3 shadings based on type 0 functions
{	% shadingDict --
	begin
		/ShadingType load dup dup 2 eq exch 3 eq or
		{	% shadingtype
			gsave
				newpath
				/ColorSpace load scs
				currentdict/BBox known
				{
					/BBox load aload pop	% llx lly urx ury
					2 index sub				% llx lly urx ury-lly
					3 index					% llx lly urx ury-lly llx
					3 -1 roll exch sub 
					exch rectclip
				}if
				2 eq
				{sh2}{sh3}ifelse
			grestore
		}{
			% shadingtype
			pop 
			(DEBUG: shading type unimplemented\n)print flush
		}ifelse
	end
}bd

% end of language level 2 ONLY code

{restore}if not dup{save exch}if
% languagelevel3 ONLY code goes here
	L3?{	% we do these loads conditionally or else they will fail on a level 2 printer
		/sh/shfill ld
		/csq/clipsave ld
		/csQ/cliprestore ld
	}if
{restore}if

%currentdict dup maxlength exch length sub (number of extra slots in md = )print == flush	% *** how many entries are free
end
setpacking
% count 0 ne { pstack(***extras on stack during prolog execution***\n)print flush}if	% *** BARK if anything is left on stack
%%EndFile
%%EndProlog
%%BeginSetup
%%EndSetup
%%Page: 1 1
%%PageBoundingBox: 0 0 2048 1500
%%BeginPageSetup
cg_md begin
bp
sdmtx
[ /CIEBasedABC 4 dict dup begin 
/WhitePoint [ 0.9505 1.0000 1.0891 ] def 
/DecodeABC [ 
{ 1.0 0.0 3 -1 roll 1 index 1 index le { exch pop} { pop } ifelse 
 1 index 1 index ge { exch pop } { pop } ifelse < 
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000001010101010101010101010101
0101010101010101010101010101010101010101010101020202020202020202
0202020202020202020202020202020202030303030303030303030303030303
0303030303030304040404040404040404040404040404040404050505050505
0505050505050505050506060606060606060606060606060607070707070707
0707070707070708080808080808080808080808090909090909090909090909
0a0a0a0a0a0a0a0a0a0a0a0b0b0b0b0b0b0b0b0b0b0b0c0c0c0c0c0c0c0c0c0c
0d0d0d0d0d0d0d0d0d0d0e0e0e0e0e0e0e0e0e0f0f0f0f0f0f0f0f0f10101010
1010101010111111111111111112121212121212121313131313131313141414
1414141414151515151515151616161616161616171717171717171818181818
18181919191919191a1a1a1a1a1a1a1b1b1b1b1b1b1c1c1c1c1c1c1c1d1d1d1d
1d1d1e1e1e1e1e1e1f1f1f1f1f1f202020202020212121212121222222222223
2323232323242424242425252525252526262626262727272727282828282829
292929292a2a2a2a2a2b2b2b2b2b2c2c2c2c2c2d2d2d2d2d2e2e2e2e2e2f2f2f
2f2f303030303131313131323232323333333333343434343535353535363636
36373737373838383839393939393a3a3a3a3b3b3b3b3c3c3c3c3d3d3d3d3e3e
3e3e3f3f3f3f4040404041414141424242424343434444444445454545464646
4647474748484848494949494a4a4a4b4b4b4b4c4c4c4d4d4d4d4e4e4e4f4f4f
4f50505051515151525252535353535454545555555656565657575758585859
59595a5a5a5a5b5b5b5c5c5c5d5d5d5e5e5e5f5f5f6060606061616162626263
63636464646565656666666767676868686969696a6a6a6b6b6b6c6c6d6d6d6e
6e6e6f6f6f707070717171727273737374747475757576767677777878787979
797a7a7b7b7b7c7c7c7d7d7e7e7e7f7f7f808081818182828283838484848585
86868687878888888989898a8a8b8b8b8c8c8d8d8d8e8e8f8f90909091919292
9293939494949595969697979798989999999a9a9b9b9c9c9c9d9d9e9e9f9f9f
a0a0a1a1a2a2a3a3a3a4a4a5a5a6a6a6a7a7a8a8a9a9aaaaabababacacadadae
aeafafb0b0b0b1b1b2b2b3b3b4b4b5b5b6b6b6b7b7b8b8b9b9bababbbbbcbcbd
bdbebebebfbfc0c0c1c1c2c2c3c3c4c4c5c5c6c6c7c7c8c8c9c9cacacbcbcccc
cdcdcececfcfd0d0d1d1d2d2d3d3d4d4d5d5d6d6d7d7d8d8d9d9dadadbdcdcdd
dddededfdfe0e0e1e1e2e2e3e3e4e4e5e6e6e7e7e8e8e9e9eaeaebebecededee
eeefeff0f0f1f1f2f3f3f4f4f5f5f6f6f7f8f8f9f9fafafbfcfcfdfdfefeffff
>  dup length 1 sub 3 -1 roll mul dup dup floor cvi exch ceiling 
 cvi 3 index exch get 4 -1 roll 3 -1 roll get
 dup 3 1 roll sub 3 -1 roll dup floor cvi sub mul add 255 div } bind 

{ 1.0 0.0 3 -1 roll 1 index 1 index le { exch pop} { pop } ifelse 
 1 index 1 index ge { exch pop } { pop } ifelse < 
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000001010101010101010101010101
0101010101010101010101010101010101010101010101020202020202020202
0202020202020202020202020202020202030303030303030303030303030303
0303030303030304040404040404040404040404040404040404050505050505
0505050505050505050506060606060606060606060606060607070707070707
0707070707070708080808080808080808080808090909090909090909090909
0a0a0a0a0a0a0a0a0a0a0a0b0b0b0b0b0b0b0b0b0b0b0c0c0c0c0c0c0c0c0c0c
0d0d0d0d0d0d0d0d0d0d0e0e0e0e0e0e0e0e0e0f0f0f0f0f0f0f0f0f10101010
1010101010111111111111111112121212121212121313131313131313141414
1414141414151515151515151616161616161616171717171717171818181818
18181919191919191a1a1a1a1a1a1a1b1b1b1b1b1b1c1c1c1c1c1c1c1d1d1d1d
1d1d1e1e1e1e1e1e1f1f1f1f1f1f202020202020212121212121222222222223
2323232323242424242425252525252526262626262727272727282828282829
292929292a2a2a2a2a2b2b2b2b2b2c2c2c2c2c2d2d2d2d2d2e2e2e2e2e2f2f2f
2f2f303030303131313131323232323333333333343434343535353535363636
36373737373838383839393939393a3a3a3a3b3b3b3b3c3c3c3c3d3d3d3d3e3e
3e3e3f3f3f3f4040404041414141424242424343434444444445454545464646
4647474748484848494949494a4a4a4b4b4b4b4c4c4c4d4d4d4d4e4e4e4f4f4f
4f50505051515151525252535353535454545555555656565657575758585859
59595a5a5a5a5b5b5b5c5c5c5d5d5d5e5e5e5f5f5f6060606061616162626263
63636464646565656666666767676868686969696a6a6a6b6b6b6c6c6d6d6d6e
6e6e6f6f6f707070717171727273737374747475757576767677777878787979
797a7a7b7b7b7c7c7c7d7d7e7e7e7f7f7f808081818182828283838484848585
86868687878888888989898a8a8b8b8b8c8c8d8d8d8e8e8f8f90909091919292
9293939494949595969697979798989999999a9a9b9b9c9c9c9d9d9e9e9f9f9f
a0a0a1a1a2a2a3a3a3a4a4a5a5a6a6a6a7a7a8a8a9a9aaaaabababacacadadae
aeafafb0b0b0b1b1b2b2b3b3b4b4b5b5b6b6b6b7b7b8b8b9b9bababbbbbcbcbd
bdbebebebfbfc0c0c1c1c2c2c3c3c4c4c5c5c6c6c7c7c8c8c9c9cacacbcbcccc
cdcdcececfcfd0d0d1d1d2d2d3d3d4d4d5d5d6d6d7d7d8d8d9d9dadadbdcdcdd
dddededfdfe0e0e1e1e2e2e3e3e4e4e5e6e6e7e7e8e8e9e9eaeaebebecededee
eeefeff0f0f1f1f2f3f3f4f4f5f5f6f6f7f8f8f9f9fafafbfcfcfdfdfefeffff
>  dup length 1 sub 3 -1 roll mul dup dup floor cvi exch ceiling 
 cvi 3 index exch get 4 -1 roll 3 -1 roll get
 dup 3 1 roll sub 3 -1 roll dup floor cvi sub mul add 255 div } bind 

{ 1.0 0.0 3 -1 roll 1 index 1 index le { exch pop} { pop } ifelse 
 1 index 1 index ge { exch pop } { pop } ifelse < 
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000001010101010101010101010101
0101010101010101010101010101010101010101010101020202020202020202
0202020202020202020202020202020202030303030303030303030303030303
0303030303030304040404040404040404040404040404040404050505050505
0505050505050505050506060606060606060606060606060607070707070707
0707070707070708080808080808080808080808090909090909090909090909
0a0a0a0a0a0a0a0a0a0a0a0b0b0b0b0b0b0b0b0b0b0b0c0c0c0c0c0c0c0c0c0c
0d0d0d0d0d0d0d0d0d0d0e0e0e0e0e0e0e0e0e0f0f0f0f0f0f0f0f0f10101010
1010101010111111111111111112121212121212121313131313131313141414
1414141414151515151515151616161616161616171717171717171818181818
18181919191919191a1a1a1a1a1a1a1b1b1b1b1b1b1c1c1c1c1c1c1c1d1d1d1d
1d1d1e1e1e1e1e1e1f1f1f1f1f1f202020202020212121212121222222222223
2323232323242424242425252525252526262626262727272727282828282829
292929292a2a2a2a2a2b2b2b2b2b2c2c2c2c2c2d2d2d2d2d2e2e2e2e2e2f2f2f
2f2f303030303131313131323232323333333333343434343535353535363636
36373737373838383839393939393a3a3a3a3b3b3b3b3c3c3c3c3d3d3d3d3e3e
3e3e3f3f3f3f4040404041414141424242424343434444444445454545464646
4647474748484848494949494a4a4a4b4b4b4b4c4c4c4d4d4d4d4e4e4e4f4f4f
4f50505051515151525252535353535454545555555656565657575758585859
59595a5a5a5a5b5b5b5c5c5c5d5d5d5e5e5e5f5f5f6060606061616162626263
63636464646565656666666767676868686969696a6a6a6b6b6b6c6c6d6d6d6e
6e6e6f6f6f707070717171727273737374747475757576767677777878787979
797a7a7b7b7b7c7c7c7d7d7e7e7e7f7f7f808081818182828283838484848585
86868687878888888989898a8a8b8b8b8c8c8d8d8d8e8e8f8f90909091919292
9293939494949595969697979798989999999a9a9b9b9c9c9c9d9d9e9e9f9f9f
a0a0a1a1a2a2a3a3a3a4a4a5a5a6a6a6a7a7a8a8a9a9aaaaabababacacadadae
aeafafb0b0b0b1b1b2b2b3b3b4b4b5b5b6b6b6b7b7b8b8b9b9bababbbbbcbcbd
bdbebebebfbfc0c0c1c1c2c2c3c3c4c4c5c5c6c6c7c7c8c8c9c9cacacbcbcccc
cdcdcececfcfd0d0d1d1d2d2d3d3d4d4d5d5d6d6d7d7d8d8d9d9dadadbdcdcdd
dddededfdfe0e0e1e1e2e2e3e3e4e4e5e6e6e7e7e8e8e9e9eaeaebebecededee
eeefeff0f0f1f1f2f3f3f4f4f5f5f6f6f7f8f8f9f9fafafbfcfcfdfdfefeffff
>  dup length 1 sub 3 -1 roll mul dup dup floor cvi exch ceiling 
 cvi 3 index exch get 4 -1 roll 3 -1 roll get
 dup 3 1 roll sub 3 -1 roll dup floor cvi sub mul add 255 div } bind 
] def 
/MatrixABC [ 0.4124 0.2126 0.0193 0.3576 0.7151 0.1192 0.1805 0.0722 0.9508 ] def 
/RangeLMN [ 0.0 0.9505 0.0 1.0000 0.0 1.0891 ] def 
end ] /Cs1 exch/ColorSpace dr pop
%%EndPageSetup
0.60000002 i
/Cs1 SC
1 0 0 sc
q
0 0 2048 1500 rc
0 1500 m
2048 1500 l
2048 0 l
0 0 l
h
f
Q
0 0 0 sc
q
1886.1257 414.84149 m
1732.5223 592.70422 l
1763.2161 646.81006 l
1723.5731 646.81006 l
1709.3776 598.43567 l
1616.8065 598.43567 l
1726.972 891.48041 l
1825.7412 891.48041 l
1856.1411 810.61554 l
1918.3914 920.34833 l
2172 838.32074 l
2139.2012 121.79674 l
1915.6102 380.70041 l
1915.6102 216.56882 l
2011.1722 40.764324 l
2016.9631 155.42076 l
2139.2012 71.174942 l
2142.5156 -126.00394 l
579.06 -126.00394 l
713.10144 118.75146 l
682.13696 122.4474 659.55707 131.39159 645.36145 145.58414 c
626.32062 164.62083 615.47821 188.77177 612.83392 218.03766 c
348.2099 298.64835 l
359.87363 332.125 l
280.65256 327.48776 l
278.3866 340.68085 273.62146 350.27567 266.35703 356.27252 c
259.09259 362.26938 249.0625 365.26776 236.26643 365.26776 c
225.73634 365.26776 217.80556 363.03561 212.47388 358.57132 c
207.14218 354.10699 204.47636 348.67657 204.47636 342.27994 c
204.47636 337.61572 206.67566 333.41797 211.07431 329.68661 c
215.33966 325.82196 225.46973 322.22391 241.46481 318.89233 c
281.05264 310.36346 309.41016 301.7348 326.53824 293.00604 c
343.66629 284.27728 356.12894 273.4498 363.92654 260.52325 c
371.72415 247.59669 375.62289 233.13783 375.62289 217.14622 c
375.62289 198.35608 370.42456 181.0321 360.02777 165.17375 c
357.24084 160.92285 354.15704 156.94727 350.77637 153.24696 c
387.42493 119.26189 l
-114 -174 l
-114 856.27472 l
-114 1379.1704 l
-0.25965706 1379.1704 l
125.30111 1242.2358 l
125.30111 1353.4985 l
368.02527 1353.4985 l
368.02527 1290.9316 l
216.07274 1290.9316 l
216.07274 1244.3563 l
357.02869 1244.3563 l
357.02869 1184.588 l
216.07274 1184.588 l
216.07274 1143.2418 l
231.13184 1126.8186 l
372.42389 1126.8186 l
372.42389 1060.4537 l
193.03065 1060.4537 l
13.556845 922.349 l
13.556845 856.27472 l
72.400116 856.27472 l
97.431862 633.43756 l
137.20024 631.25574 l
137.20024 891.48041 l
227.77194 891.48041 l
227.77194 670.59741 l
369.12778 670.59741 l
369.12778 598.43567 l
327.47165 598.43567 l
165.4539 404.62878 l
167.92844 405.93448 170.50586 407.17322 173.18614 408.34494 c
190.7141 416.00757 214.73967 419.83884 245.26363 419.83884 c
282.71878 419.83884 311.27625 412.87595 330.93686 398.94992 c
347.96454 386.88885 359.01816 368.65549 364.09796 344.24942 c
432.06696 539.33057 l
608.04694 499.18781 l
682.72229 600.85028 l
675.87225 602.80847 669.68146 605.23523 664.1499 608.13055 c
652.82001 614.06073 642.45673 622.4895 633.05957 633.41711 c
623.66248 644.34473 617.2312 655.60535 613.76562 667.19922 c
608.16736 685.85614 605.36823 702.38055 605.36823 716.77295 c
605.36823 794.81598 l
343.26123 920.34833 l
481.58978 1280.1353 l
618.06714 1322.0356 l
618.06714 1353.4985 l
720.5473 1353.4985 l
997.48694 1438.5228 l
984.1192 1061.9203 l
815.29474 891.48041 l
886.28046 891.48041 l
886.28046 774.00262 l
1113.8905 774.00262 l
1118.0972 808.89349 1130.45 836.69189 1150.9492 857.3985 c
1176.7412 883.45148 1213.2295 896.47778 1260.415 896.47778 c
1297.3369 896.47778 1326.361 889.01514 1347.4878 874.08966 c
1368.6146 859.16412 1384.3096 836.24316 1394.5731 805.32605 c
1314.598 787.53546 l
1311.799 796.46411 1308.8666 802.99396 1305.8008 807.12512 c
1300.7357 814.05481 1294.5377 819.38525 1287.2067 823.11664 c
1279.8755 826.84802 1271.6782 828.71368 1262.6143 828.71368 c
1242.0873 828.71368 1226.359 820.45148 1215.4291 803.92682 c
1207.1649 791.66656 1203.033 772.41028 1203.033 746.15741 c
1203.033 713.64111 1207.9647 691.35315 1217.8282 679.29285 c
1226.9597 668.12781 1239.5181 662.13092 1255.5037 661.30212 c
1314.5594 705.15948 l
1315.856 709.22473 1317.0018 713.56226 1317.9969 718.17224 c
1328.0079 715.14691 l
1501.9467 844.32129 l
1162.9565 1042.1366 l
1205.4265 1091.6593 l
1205.4265 1353.4985 l
1296.1981 1353.4985 l
1296.1981 1197.5051 l
1502.8909 1438.5228 l
1679.3915 1324.0963 l
1704.8301 1347.0294 1739.684 1358.4958 1783.9542 1358.4958 c
1802.4329 1358.4958 1818.9332 1356.6267 1833.4553 1352.8882 c
1825.1699 1536.5558 l
2172 1536.5558 l
2172 1191.1683 l
1848.299 1023.8414 l
1846.4875 1063.9965 l
1830.5956 1058.1698 1811.1509 1055.2565 1788.153 1055.2565 c
1763.2383 1055.2565 1741.8906 1058.089 1724.1099 1063.7539 c
1554.7133 480.20016 l
1176.4866 602.62067 l
1184.1124 608.28394 l
1164.9454 617.71606 1148.3263 633.62299 1134.2544 656.00519 c
1121.8654 675.71069 1114.7106 700.07806 1112.7899 729.10785 c
945.44482 525.72437 l
1138.1456 414.84149 l
1374.1566 414.84149 l
1374.1566 352.27463 l
1222.2041 352.27463 l
1222.2041 305.69931 l
1363.16 305.69931 l
1363.16 245.93097 l
1222.2041 245.93097 l
1222.2041 198.5123 l
1246.4098 188.16158 l
1378.5552 188.16158 l
1378.5552 131.65425 l
1653.595 14.043211 l
1815.2979 143.69716 l
1720.4712 282.71149 l
1720.4712 121.79674 l
1635.2979 121.79674 l
1635.2979 414.84149 l
1719.8715 414.84149 l
1830.2369 252.72737 l
1830.2369 414.84149 l
1886.1257 414.84149 l
h
1799.1631 710.17645 m
1804.7297 719.9892 l
1775.3569 815.52063 l
1743.167 710.17645 l
1799.1631 710.17645 l
h
1745.3622 1136.9661 m
1754.8546 1127.8024 1767.3854 1123.2205 1782.9546 1123.2205 c
1800.2826 1123.2205 1813.3783 1128.0846 1822.2423 1137.8127 c
1830.9304 1147.348 1837.2814 1161.108 1841.2954 1179.093 c
1838.1134 1249.6298 l
1835.3215 1258.5194 1832.3971 1265.0238 1829.3401 1269.1432 c
1824.2749 1276.0729 1818.0769 1281.4033 1810.7458 1285.1348 c
1803.4148 1288.8661 1795.2174 1290.7318 1786.1536 1290.7318 c
1771.6743 1290.7318 1759.5826 1286.6208 1749.8785 1278.3989 c
1780.6306 1258.4622 l
1745.3622 1136.9661 l
h
1131.4325 245.47325 m
1130.5585 237.70132 l
1131.4325 237.32758 l
1131.4325 245.47325 l
h
743.72766 174.6739 m
745.36591 177.6653 l
715.19818 186.8551 l
722.71021 179.83195 732.22003 175.77158 743.72766 174.6739 c
h
695.73999 770.7818 m
695.73999 712.5752 l
695.73999 696.58356 700.17194 684.09033 709.03583 675.09503 c
714.39868 669.65277 721.01782 665.85681 728.89337 663.70721 c
795.90869 754.94135 l
795.90869 871.90894 l
695.73999 770.7818 l
h
266.24658 231.63345 m
286.06027 213.25972 l
284.46237 217.44283 281.66013 221.33693 277.6535 224.94209 c
275.12122 227.22066 271.31891 229.4511 266.24658 231.63345 c
h
-20.335724 1514.3958 m
-20.335724 1590 l
545.56976 1579.068 l
495.19186 1366.9625 l
294.98233 1405.1968 l
294.98233 1479.8859 l
-20.335724 1514.3958 l
h
1179.2268 1539.1282 m
1475.2793 1582.0265 l
1223.7236 1390.9323 l
1179.2268 1539.1282 l
h
125.30111 1242.2358 m
125.30111 1060.4537 l
193.03065 1060.4537 l
251.0482 1105.0981 l
231.13184 1126.8186 l
216.07274 1126.8186 l
216.07274 1143.2418 l
125.30111 1242.2358 l
h
327.47165 598.43567 m
345.36148 619.83563 l
137.20024 631.25574 l
137.20024 598.43567 l
327.47165 598.43567 l
h
165.45387 404.62875 m
151.74579 397.39563 141.19406 388.10666 133.79845 376.76166 c
125.0678 363.36868 120.70255 349.14304 120.70255 334.08429 c
120.70255 311.16296 129.23312 292.30649 146.29456 277.51425 c
163.22267 262.72202 191.54688 250.86174 231.26799 241.93309 c
246.30971 238.62794 257.96921 235.19473 266.24658 231.63345 c
128.00313 359.8299 l
165.4539 404.62878 l
h
286.06027 213.25972 m
287.12036 210.48463 287.65039 207.58237 287.65039 204.5529 c
287.65039 196.5571 284.15152 189.52756 277.15366 183.46407 c
270.15582 177.40059 260.19235 174.36888 247.263 174.36888 c
229.935 174.36888 216.60596 180.29903 207.2755 192.15947 c
201.54393 199.48895 197.74515 210.14986 195.87906 224.14252 c
109.70598 218.74538 l
112.23853 189.1609 123.1017 164.77406 142.29579 145.58414 c
161.4899 126.3942 196.0121 116.79939 245.86343 116.79939 c
274.2547 116.79939 297.78046 120.89717 316.44138 129.09288 c
330.10016 135.09167 341.5451 143.14299 350.77637 153.24696 c
286.06027 213.25972 l
h
359.87363 332.125 m
366.02588 332.48514 l
365.52606 336.55414 364.88342 340.47559 364.09796 344.24942 c
359.87363 332.125 l
h
618.06714 1322.0356 m
618.06714 1060.4537 l
709.0387 1060.4537 l
709.0387 1179.3907 l
717.03619 1179.3907 l
725.30035 1179.3907 732.69794 1177.1254 739.22925 1172.5944 c
744.02777 1169.1295 749.49268 1161.6002 755.62415 1150.0063 c
804.00903 1060.4537 l
906.37701 1060.4537 l
862.5907 1145.4088 l
860.45807 1149.6732 856.22607 1155.7366 849.89471 1163.5991 c
843.56329 1171.4617 838.73151 1176.5922 835.39923 1178.991 c
830.46741 1182.5891 822.60327 1186.1871 811.80658 1189.7853 c
825.2691 1192.8503 835.86572 1196.7148 843.59668 1201.3792 c
855.72626 1208.7086 865.25653 1218.2701 872.18774 1230.064 c
879.11896 1241.8577 882.58447 1255.8834 882.58447 1272.1416 c
882.58447 1290.7985 878.05261 1306.6233 868.98871 1319.6165 c
859.92487 1332.6096 847.99536 1341.5049 833.19989 1346.3024 c
818.40448 1351.0999 797.01135 1353.4985 769.01996 1353.4985 c
720.5473 1353.4985 l
618.06714 1322.0356 l
h
709.0387 1234.7615 m
709.0387 1294.3298 l
748.82629 1294.3298 l
765.35455 1294.3298 776.61755 1291.7979 782.61572 1286.7339 c
788.61389 1281.6699 791.61292 1274.4071 791.61292 1264.9454 c
791.61292 1258.5488 789.7135 1252.8851 785.91467 1247.9545 c
782.11584 1243.0237 777.21741 1239.9586 771.2193 1238.7593 c
759.35626 1236.094 751.35883 1234.7615 747.22675 1234.7615 c
709.0387 1234.7615 l
h
605.36823 794.81598 m
682.8089 757.72693 l
695.73999 770.7818 l
695.73999 891.48041 l
605.36823 891.48041 l
605.36823 794.81598 l
h
795.90869 871.90894 m
815.29474 891.48041 l
795.90869 891.48041 l
795.90869 871.90894 l
h
886.28046 774.00262 m
809.91003 774.00262 l
795.90869 754.94135 l
795.90869 712.5752 l
795.90869 696.31708 791.47681 683.7572 782.61285 674.89514 c
773.7489 666.03314 761.51953 661.60217 745.92432 661.60217 c
739.71185 661.60217 734.03485 662.30389 728.89337 663.70721 c
682.72229 600.85028 l
689.90265 598.79767 697.80743 597.25983 706.43665 596.23682 c
723.29816 594.23785 738.8598 593.2384 753.12207 593.2384 c
777.78119 593.2384 798.90765 596.5033 816.50226 603.0332 c
829.16504 607.69745 841.26117 615.79309 852.79095 627.32037 c
864.32074 638.84766 872.78467 652.30707 878.18298 667.69897 c
883.58136 683.09088 886.28046 699.44873 886.28046 716.77295 c
886.28046 774.00262 l
h
713.10144 118.75146 m
724.00446 117.45007 735.94696 116.79939 748.92908 116.79939 c
777.32037 116.79939 800.84613 120.89717 819.50702 129.09288 c
838.16797 137.28857 852.69659 149.31541 863.09344 165.17375 c
873.49023 181.0321 878.68854 198.35608 878.68854 217.14622 c
878.68854 233.13783 874.78979 247.59669 866.99219 260.52325 c
859.19458 273.4498 846.73193 284.27728 829.60388 293.00604 c
812.47583 301.7348 784.11829 310.36346 744.53046 318.89233 c
728.5354 322.22391 718.40533 325.82196 714.13995 329.68661 c
709.74133 333.41797 707.54205 337.61572 707.54205 342.27994 c
707.54205 348.67657 710.20782 354.10699 715.53955 358.57132 c
720.87122 363.03561 728.802 365.26776 739.33209 365.26776 c
752.12817 365.26776 762.15826 362.26938 769.42267 356.27252 c
776.68713 350.27567 781.45227 340.68085 783.7182 327.48776 c
869.09155 332.48514 l
865.35938 362.86917 853.66315 385.0239 834.0025 398.94992 c
814.34192 412.87595 785.78442 419.83884 748.32928 419.83884 c
717.80536 419.83884 693.77972 416.00757 676.25183 408.34494 c
658.72388 400.68228 645.59479 390.15463 636.86414 376.76166 c
628.13348 363.36868 623.76819 349.14304 623.76819 334.08429 c
623.76819 311.16296 632.29877 292.30649 649.36023 277.51425 c
666.28833 262.72202 694.61255 250.86174 734.33368 241.93309 c
758.5929 236.60255 774.05457 230.93895 780.71918 224.94209 c
787.38379 218.94524 790.71606 212.14891 790.71606 204.5529 c
790.71606 196.5571 787.21716 189.52756 780.2193 183.46407 c
773.2215 177.40059 763.258 174.36888 750.32867 174.36888 c
748.05975 174.36888 745.85944 174.47057 743.72766 174.6739 c
713.10144 118.75146 l
h
715.19818 186.8551 m
713.47388 188.46713 711.85492 190.23526 710.34119 192.15947 c
704.60956 199.48895 700.81079 210.14986 698.9447 224.14252 c
612.77167 218.74538 l
612.79187 218.50914 612.81262 218.27324 612.83392 218.03766 c
715.19818 186.8551 l
h
1205.4265 1091.6593 m
1205.4265 1060.4537 l
1296.1981 1060.4537 l
1296.1981 1197.5051 l
1205.4265 1091.6593 l
h
1328.0079 715.14691 m
1314.5594 705.15948 l
1310.6465 692.89008 1305.361 683.10187 1298.703 675.79468 c
1289.8391 666.06647 1276.7433 661.20239 1259.4153 661.20239 c
1258.0894 661.20239 1256.7855 661.23566 1255.5037 661.30212 c
1184.1124 608.28394 l
1184.9165 607.88824 1185.7251 607.50397 1186.5381 607.13104 c
1206.7318 597.86926 1232.7568 593.2384 1264.6136 593.2384 c
1290.8723 593.2384 1312.4987 597.03638 1329.4934 604.63239 c
1346.4882 612.22839 1360.7169 623.48895 1372.1801 638.41449 c
1383.6432 653.33997 1392.0405 671.92993 1397.3722 694.18494 c
1328.0079 715.14691 l
h
1112.7899 729.10785 m
1149.7296 774.00262 l
1113.8905 774.00262 l
1112.8043 764.99384 1112.2612 755.51221 1112.2612 745.55774 c
1112.2612 739.91748 1112.4375 734.4342 1112.7899 729.10785 c
h
1138.1456 414.84149 m
1131.4325 414.84149 l
1131.4325 245.47325 l
1149.7296 408.1759 l
1138.1456 414.84149 l
h
1131.4325 237.32758 m
1131.4325 121.79674 l
1378.5552 121.79674 l
1378.5552 131.65425 l
1246.4098 188.16158 l
1222.2041 188.16158 l
1222.2041 198.5123 l
1131.4325 237.32758 l
h
1724.1099 1063.7539 m
1745.3622 1136.9661 l
1743.9648 1138.3151 1742.6333 1139.7633 1741.3676 1141.3109 c
1731.5039 1153.3712 1726.5721 1175.6592 1726.5721 1208.1755 c
1726.5721 1234.4283 1730.7042 1253.6847 1738.9683 1265.9449 c
1742.1886 1270.8135 1745.8253 1274.9648 1749.8785 1278.3989 c
1679.3915 1324.0963 l
1677.7163 1322.5861 1676.0819 1321.0262 1674.4884 1319.4166 c
1648.6964 1293.3635 1635.8005 1256.0837 1635.8005 1207.5758 c
1635.8005 1171.1949 1643.1315 1141.3444 1657.7937 1118.0233 c
1672.4558 1094.7021 1689.8835 1078.411 1710.0774 1069.1492 c
1714.4779 1067.1309 1719.1554 1065.3324 1724.1099 1063.7539 c
h
1846.4875 1063.9965 m
1848.7406 1064.8226 1850.9224 1065.7073 1853.0327 1066.6505 c
1870.0275 1074.2465 1884.2562 1085.5071 1895.7194 1100.4326 c
1907.1825 1115.358 1915.5797 1133.948 1920.9115 1156.203 c
1841.5363 1180.1903 l
1841.4569 1179.8229 1841.3766 1179.457 1841.2954 1179.093 c
1846.4875 1063.9965 l
h
1838.1134 1249.6298 m
1838.1213 1249.6044 1838.1294 1249.579 1838.1373 1249.5536 c
1918.1123 1267.3441 l
1907.8489 1298.2612 1892.1539 1321.1823 1871.0271 1336.1078 c
1860.4738 1343.5634 1847.9498 1349.1569 1833.4553 1352.8882 c
1838.1134 1249.6298 l
h
1763.2161 646.81006 m
1826.7408 646.81006 l
1841.1364 598.43567 l
1935.9067 598.43567 l
1856.1411 810.61554 l
1804.7297 719.9892 l
1807.7468 710.17645 l
1799.1631 710.17645 l
1763.2161 646.81006 l
h
1886.1257 414.84149 m
1915.6102 380.70041 l
1915.6102 414.84149 l
1886.1257 414.84149 l
h
1815.2979 143.69716 m
1830.2369 121.79674 l
1915.6102 121.79674 l
1915.6102 216.56882 l
1912.7485 221.83347 l
1815.2979 143.69716 l
h
W*
0 0 2048 1500 rc
-124 1600 m
2182 1600 l
2182 -184 l
-124 -184 l
h
f
ep
end
%%Trailer
%%EOF
